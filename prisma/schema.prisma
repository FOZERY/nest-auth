generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * 1. Работа с двумя таблицами:
 * - Таблица User должна иметь поле balance с типом `decimal`
 * - Таблица History для записи истории платежей
 * 1. Использовать транзакции с уровнем изоляции репитабл рид
 * 2. Использовать блокировку SELECT FOR UPDATE для поля balance
 */
model users {
  id                    String             @id @db.Uuid()
  login                 String             @unique
  email                 String             @unique
  password              String
  age                   Int
  balance               Decimal            @default(0) @db.Decimal(10, 2)
  about                 String?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  deleted_at            DateTime?
  refresh_sessions      refresh_sessions[]
  avatars               avatars[]
  sent_transactions     transactions[]     @relation("FromUser")
  received_transactions transactions[]     @relation("ToUser")
}

model transactions {
  id         String   @id @db.Uuid()
  from_user  users    @relation("FromUser", fields: [user_id], references: [id], onDelete: Cascade)
  to_user    users    @relation("ToUser", fields: [to_user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid()
  to_user_id String   @db.Uuid()
  amount     Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
}

model avatars {
  id         String    @id @db.Uuid()
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String    @db.Uuid()
  path       String
  active     Boolean
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model refresh_sessions {
  refresh_token String   @id @db.Uuid()
  user          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String   @db.Uuid()
  fingerprint   String
  ip_address    String?
  user_agent    String?
  expires_at    DateTime
  created_at    DateTime @default(now())
}
